# handlers/translate_handler.py
"""
Zoptymalizowany handler obs≈Çugi t≈Çumacze≈Ñ z wykorzystaniem klasy bazowej
"""
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode, ChatAction
from utils.translations import get_text
from utils.openai_client import chat_completion, analyze_image, analyze_document
from handlers.base_handler import BaseHandler
import re

logger = logging.getLogger(__name__)

class TranslateHandler(BaseHandler):
    """
    Handler do obs≈Çugi funkcji t≈Çumaczenia tekstu, zdjƒôƒá i dokument√≥w
    """
    
    # Mapowanie kod√≥w jƒôzyk√≥w na ich nazwy
    LANGUAGE_NAMES = {
        "pl": "Polski",
        "en": "English",
        "ru": "–†—É—Å—Å–∫–∏–π",
        "fr": "Fran√ßais",
        "de": "Deutsch",
        "es": "Espa√±ol",
        "it": "Italiano",
        "zh": "‰∏≠Êñá",
        "ja": "Êó•Êú¨Ë™û",
        "ko": "ÌïúÍµ≠Ïñ¥",
        "ar": "ÿßŸÑÿπÿ±ÿ®Ÿäÿ©",
        "pt": "Portugu√™s"
    }
    
    @staticmethod
    async def translate_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        Obs≈Çuga komendy /translate
        Instruuje u≈ºytkownika jak korzystaƒá z funkcji t≈Çumaczenia lub wykonuje t≈Çumaczenie
        """
        user_id = update.effective_user.id
        language = TranslateHandler.get_user_language(context, user_id)
        
        # Sprawd≈∫, czy komenda zawiera argumenty (tekst do t≈Çumaczenia i docelowy jƒôzyk)
        if context.args and len(context.args) >= 2:
            # Format: /translate [jƒôzyk_docelowy] [tekst]
            # np. /translate en Witaj ≈õwiecie!
            target_lang = context.args[0].lower()
            text_to_translate = ' '.join(context.args[1:])
            await TranslateHandler.translate_text(update, context, text_to_translate, target_lang)
            return
        
        # Sprawd≈∫, czy wiadomo≈õƒá jest odpowiedziƒÖ na zdjƒôcie lub dokument
        if update.message.reply_to_message:
            # Obs≈Çuga odpowiedzi na wcze≈õniejszƒÖ wiadomo≈õƒá
            replied_message = update.message.reply_to_message
            
            # Ustal docelowy jƒôzyk t≈Çumaczenia z argument√≥w komendy
            target_lang = "en"  # Domy≈õlnie angielski
            if context.args and len(context.args) > 0:
                target_lang = context.args[0].lower()
            
            if replied_message.photo:
                # Odpowied≈∫ na zdjƒôcie - wykonaj t≈Çumaczenie tekstu ze zdjƒôcia
                await TranslateHandler.translate_photo(update, context, replied_message.photo[-1], target_lang)
                return
            elif replied_message.document:
                # Odpowied≈∫ na dokument - wykonaj t≈Çumaczenie dokumentu
                await TranslateHandler.translate_document(update, context, replied_message.document, target_lang)
                return
            elif replied_message.text:
                # Odpowied≈∫ na zwyk≈ÇƒÖ wiadomo≈õƒá tekstowƒÖ
                await TranslateHandler.translate_text(update, context, replied_message.text, target_lang)
                return
        
        # Je≈õli nie ma odpowiedzi ani argument√≥w, wy≈õwietl instrukcje
        instruction_text = get_text("translate_instruction", language, default=(
            "üìÑ **T≈Çumaczenie tekstu**\n\n"
            "Dostƒôpne opcje:\n\n"
            "1. Wy≈õlij zdjƒôcie z tekstem do t≈Çumaczenia i dodaj /translate w opisie lub odpowiedz na zdjƒôcie komendƒÖ /translate\n\n"
            "2. Wy≈õlij dokument i odpowiedz na niego komendƒÖ /translate\n\n"
            "3. U≈ºyj komendy /translate [jƒôzyk_docelowy] [tekst]\n"
            "Na przyk≈Çad: /translate en Witaj ≈õwiecie!\n\n"
            "Dostƒôpne jƒôzyki docelowe: en (angielski), pl (polski), ru (rosyjski), fr (francuski), de (niemiecki), es (hiszpa≈Ñski), it (w≈Çoski), zh (chi≈Ñski)"
        ))
        
        await TranslateHandler.send_message(update, context, instruction_text, category="translation")
    
    @staticmethod
    async def _translate_text_operation(update, context, text, target_lang):
        """
        Wykonuje operacjƒô t≈Çumaczenia tekstu
        """
        language = TranslateHandler.get_user_language(context, update.effective_user.id)
        
        # Uniwersalny prompt niezale≈ºny od jƒôzyka
        system_prompt = f"You are a professional translator. Translate the following text to {target_lang}. Preserve formatting. Only return the translation."
        
        # Przygotuj wiadomo≈õci dla API
        messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": text}
        ]
        
        # Wykonaj t≈Çumaczenie
        translation = await chat_completion(messages, model="gpt-3.5-turbo")
        
        # Przygotuj dane wynikowe
        source_lang_name = TranslateHandler.LANGUAGE_NAMES.get(language, language)
        target_lang_name = TranslateHandler.LANGUAGE_NAMES.get(target_lang, target_lang)
        
        return {
            "source_text": text,
            "translated_text": translation,
            "source_lang": source_lang_name,
            "target_lang": target_lang_name
        }
    
    @staticmethod
    async def translate_text(update: Update, context: ContextTypes.DEFAULT_TYPE, text, target_lang="en"):
        """
        T≈Çumaczy podany tekst na okre≈õlony jƒôzyk
        """
        user_id = update.effective_user.id
        language = TranslateHandler.get_user_language(context, user_id)
        
        # Koszt t≈Çumaczenia tekstu
        credit_cost = 3
        
        # Wykonaj operacjƒô z obs≈ÇugƒÖ kredyt√≥w
        result = await TranslateHandler.process_operation_with_credits(
            update,
            context,
            credit_cost,
            "T≈Çumaczenie tekstu",
            lambda u, c: TranslateHandler._translate_text_operation(u, c, text, target_lang)
        )
        
        if not result:
            return
        
        # Wy≈õlij wynik t≈Çumaczenia
        await TranslateHandler.send_message(
            update,
            context,
            f"*{get_text('translation_result', language, default='Wynik t≈Çumaczenia')}* ({result['source_lang']} ‚Üí {result['target_lang']})\n\n{result['translated_text']}",
            category="translation"
        )
    
    @staticmethod
    async def _translate_photo_operation(update, context, photo, target_lang):
        """
        Wykonuje operacjƒô t≈Çumaczenia tekstu z zdjƒôcia
        """
        # Pobierz zdjƒôcie
        file = await context.bot.get_file(photo.file_id)
        file_bytes = await file.download_as_bytearray()
        
        # T≈Çumacz tekst ze zdjƒôcia w okre≈õlonym kierunku
        result = await analyze_image(file_bytes, f"photo_{photo.file_unique_id}.jpg", mode="translate", target_language=target_lang)
        
        return result
    
    @staticmethod
    async def translate_photo(update: Update, context: ContextTypes.DEFAULT_TYPE, photo, target_lang="en"):
        """
        T≈Çumaczy tekst wykryty na zdjƒôciu
        """
        user_id = update.effective_user.id
        language = TranslateHandler.get_user_language(context, user_id)
        
        # Koszt t≈Çumaczenia zdjƒôcia
        credit_cost = 8
        
        # Wykonaj operacjƒô z obs≈ÇugƒÖ kredyt√≥w
        result = await TranslateHandler.process_operation_with_credits(
            update,
            context,
            credit_cost,
            "T≈Çumaczenie tekstu ze zdjƒôcia",
            lambda u, c: TranslateHandler._translate_photo_operation(u, c, photo, target_lang)
        )
        
        if not result:
            return
        
        # Wy≈õlij wynik t≈Çumaczenia
        await TranslateHandler.send_message(
            update,
            context,
            f"*{get_text('translation_result', language, default='Wynik t≈Çumaczenia')}*\n\n{result}",
            category="translation"
        )
    
    @staticmethod
    async def _translate_document_operation(update, context, document, target_lang):
        """
        Wykonuje operacjƒô t≈Çumaczenia dokumentu
        """
        file_name = document.file_name
        
        # Sprawd≈∫ rozmiar pliku (limit 25MB)
        if document.file_size > 25 * 1024 * 1024:
            raise ValueError(get_text("file_too_large", TranslateHandler.get_user_language(context, update.effective_user.id)))
        
        # Pobierz plik
        file = await context.bot.get_file(document.file_id)
        file_bytes = await file.download_as_bytearray()
        
        # T≈Çumacz dokument
        result = await analyze_document(file_bytes, file_name, mode="translate", target_language=target_lang)
        
        return result
    
    @staticmethod
    async def translate_document(update: Update, context: ContextTypes.DEFAULT_TYPE, document, target_lang="en"):
        """
        T≈Çumaczy tekst z dokumentu
        """
        user_id = update.effective_user.id
        language = TranslateHandler.get_user_language(context, user_id)
        
        # Koszt t≈Çumaczenia dokumentu
        credit_cost = 8
        
        # Wykonaj operacjƒô z obs≈ÇugƒÖ kredyt√≥w
        result = await TranslateHandler.process_operation_with_credits(
            update,
            context,
            credit_cost,
            f"T≈Çumaczenie dokumentu na jƒôzyk {target_lang}",
            lambda u, c: TranslateHandler._translate_document_operation(u, c, document, target_lang)
        )
        
        if not result:
            return
        
        # Wy≈õlij wynik t≈Çumaczenia
        await TranslateHandler.send_message(
            update,
            context,
            f"*{get_text('translation_result', language, default='Wynik t≈Çumaczenia')}*\n\n{result}",
            category="translation"
        )
    
    @staticmethod
    async def handle_operation_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        Obs≈Çuguje potwierdzenie operacji t≈Çumaczenia
        """
        query = update.callback_query
        user_id = query.from_user.id
        
        await query.answer()
        
        # Sprawd≈∫, czy to potwierdzenie operacji t≈Çumaczenia
        if not query.data.startswith("confirm_operation_"):
            return False
        
        # Usu≈Ñ prefix, aby uzyskaƒá nazwƒô operacji
        operation_type = query.data[18:]
        
        # Sprawd≈∫, czy operacja jest zapisana w kontek≈õcie
        if ('user_data' not in context.chat_data or 
            user_id not in context.chat_data['user_data'] or 
            'pending_operation' not in context.chat_data['user_data'][user_id]):
            
            await query.edit_message_text(
                "Nie znaleziono oczekujƒÖcej operacji t≈Çumaczenia. Spr√≥buj ponownie.",
                parse_mode=ParseMode.MARKDOWN
            )
            return True
        
        pending_operation = context.chat_data['user_data'][user_id]['pending_operation']
        
        # Sprawd≈∫, czy typ operacji siƒô zgadza
        if pending_operation['type'] != operation_type:
            await query.edit_message_text(
                "Niezgodno≈õƒá typu operacji. Spr√≥buj ponownie.",
                parse_mode=ParseMode.MARKDOWN
            )
            return True
        
        # Usu≈Ñ wiadomo≈õƒá z potwierdzeniem
        await query.message.delete()
        
        # Poka≈º komunikat o oczekiwaniu
        waiting_message = await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="‚è≥ Trwa t≈Çumaczenie...",
            parse_mode=ParseMode.MARKDOWN
        )
        
        # TODO: Tutaj nale≈ºa≈Çoby wykonaƒá faktycznƒÖ operacjƒô zgodnie z zapisanymi danymi
        # To jest uproszczona wersja - w pe≈Çnej implementacji by≈Çoby wywo≈Çanie odpowiedniej funkcji
        # na podstawie danych zapisanych w pending_operation
        
        # Usu≈Ñ oczekujƒÖcƒÖ operacjƒô z kontekstu
        del context.chat_data['user_data'][user_id]['pending_operation']
        
        return True